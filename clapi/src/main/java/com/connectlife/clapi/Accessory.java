/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.connectlife.clapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Accessory
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-1")
public class Accessory implements org.apache.thrift.TBase<Accessory, Accessory._Fields>, java.io.Serializable, Cloneable, Comparable<Accessory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Accessory");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturer", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERIALNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialnumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("services", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGEURL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageurl", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccessoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccessoryTupleSchemeFactory());
  }

  public String uid; // required
  public String label; // required
  public String manufacturer; // required
  public String model; // required
  public String serialnumber; // required
  public List<Service> services; // required
  public String imageurl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    LABEL((short)2, "label"),
    MANUFACTURER((short)3, "manufacturer"),
    MODEL((short)4, "model"),
    SERIALNUMBER((short)5, "serialnumber"),
    SERVICES((short)6, "services"),
    IMAGEURL((short)7, "imageurl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // LABEL
          return LABEL;
        case 3: // MANUFACTURER
          return MANUFACTURER;
        case 4: // MODEL
          return MODEL;
        case 5: // SERIALNUMBER
          return SERIALNUMBER;
        case 6: // SERVICES
          return SERVICES;
        case 7: // IMAGEURL
          return IMAGEURL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.IMAGEURL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANUFACTURER, new org.apache.thrift.meta_data.FieldMetaData("manufacturer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIALNUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialnumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICES, new org.apache.thrift.meta_data.FieldMetaData("services", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Service.class))));
    tmpMap.put(_Fields.IMAGEURL, new org.apache.thrift.meta_data.FieldMetaData("imageurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Accessory.class, metaDataMap);
  }

  public Accessory() {
  }

  public Accessory(
    String uid,
    String label,
    String manufacturer,
    String model,
    String serialnumber,
    List<Service> services)
  {
    this();
    this.uid = uid;
    this.label = label;
    this.manufacturer = manufacturer;
    this.model = model;
    this.serialnumber = serialnumber;
    this.services = services;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Accessory(Accessory other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetManufacturer()) {
      this.manufacturer = other.manufacturer;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetSerialnumber()) {
      this.serialnumber = other.serialnumber;
    }
    if (other.isSetServices()) {
      List<Service> __this__services = new ArrayList<Service>(other.services.size());
      for (Service other_element : other.services) {
        __this__services.add(new Service(other_element));
      }
      this.services = __this__services;
    }
    if (other.isSetImageurl()) {
      this.imageurl = other.imageurl;
    }
  }

  public Accessory deepCopy() {
    return new Accessory(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.label = null;
    this.manufacturer = null;
    this.model = null;
    this.serialnumber = null;
    this.services = null;
    this.imageurl = null;
  }

  public String getUid() {
    return this.uid;
  }

  public Accessory setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public Accessory setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public String getManufacturer() {
    return this.manufacturer;
  }

  public Accessory setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  public void unsetManufacturer() {
    this.manufacturer = null;
  }

  /** Returns true if field manufacturer is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturer() {
    return this.manufacturer != null;
  }

  public void setManufacturerIsSet(boolean value) {
    if (!value) {
      this.manufacturer = null;
    }
  }

  public String getModel() {
    return this.model;
  }

  public Accessory setModel(String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public String getSerialnumber() {
    return this.serialnumber;
  }

  public Accessory setSerialnumber(String serialnumber) {
    this.serialnumber = serialnumber;
    return this;
  }

  public void unsetSerialnumber() {
    this.serialnumber = null;
  }

  /** Returns true if field serialnumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialnumber() {
    return this.serialnumber != null;
  }

  public void setSerialnumberIsSet(boolean value) {
    if (!value) {
      this.serialnumber = null;
    }
  }

  public int getServicesSize() {
    return (this.services == null) ? 0 : this.services.size();
  }

  public java.util.Iterator<Service> getServicesIterator() {
    return (this.services == null) ? null : this.services.iterator();
  }

  public void addToServices(Service elem) {
    if (this.services == null) {
      this.services = new ArrayList<Service>();
    }
    this.services.add(elem);
  }

  public List<Service> getServices() {
    return this.services;
  }

  public Accessory setServices(List<Service> services) {
    this.services = services;
    return this;
  }

  public void unsetServices() {
    this.services = null;
  }

  /** Returns true if field services is set (has been assigned a value) and false otherwise */
  public boolean isSetServices() {
    return this.services != null;
  }

  public void setServicesIsSet(boolean value) {
    if (!value) {
      this.services = null;
    }
  }

  public String getImageurl() {
    return this.imageurl;
  }

  public Accessory setImageurl(String imageurl) {
    this.imageurl = imageurl;
    return this;
  }

  public void unsetImageurl() {
    this.imageurl = null;
  }

  /** Returns true if field imageurl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageurl() {
    return this.imageurl != null;
  }

  public void setImageurlIsSet(boolean value) {
    if (!value) {
      this.imageurl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case MANUFACTURER:
      if (value == null) {
        unsetManufacturer();
      } else {
        setManufacturer((String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((String)value);
      }
      break;

    case SERIALNUMBER:
      if (value == null) {
        unsetSerialnumber();
      } else {
        setSerialnumber((String)value);
      }
      break;

    case SERVICES:
      if (value == null) {
        unsetServices();
      } else {
        setServices((List<Service>)value);
      }
      break;

    case IMAGEURL:
      if (value == null) {
        unsetImageurl();
      } else {
        setImageurl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case LABEL:
      return getLabel();

    case MANUFACTURER:
      return getManufacturer();

    case MODEL:
      return getModel();

    case SERIALNUMBER:
      return getSerialnumber();

    case SERVICES:
      return getServices();

    case IMAGEURL:
      return getImageurl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case LABEL:
      return isSetLabel();
    case MANUFACTURER:
      return isSetManufacturer();
    case MODEL:
      return isSetModel();
    case SERIALNUMBER:
      return isSetSerialnumber();
    case SERVICES:
      return isSetServices();
    case IMAGEURL:
      return isSetImageurl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Accessory)
      return this.equals((Accessory)that);
    return false;
  }

  public boolean equals(Accessory that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_manufacturer = true && this.isSetManufacturer();
    boolean that_present_manufacturer = true && that.isSetManufacturer();
    if (this_present_manufacturer || that_present_manufacturer) {
      if (!(this_present_manufacturer && that_present_manufacturer))
        return false;
      if (!this.manufacturer.equals(that.manufacturer))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_serialnumber = true && this.isSetSerialnumber();
    boolean that_present_serialnumber = true && that.isSetSerialnumber();
    if (this_present_serialnumber || that_present_serialnumber) {
      if (!(this_present_serialnumber && that_present_serialnumber))
        return false;
      if (!this.serialnumber.equals(that.serialnumber))
        return false;
    }

    boolean this_present_services = true && this.isSetServices();
    boolean that_present_services = true && that.isSetServices();
    if (this_present_services || that_present_services) {
      if (!(this_present_services && that_present_services))
        return false;
      if (!this.services.equals(that.services))
        return false;
    }

    boolean this_present_imageurl = true && this.isSetImageurl();
    boolean that_present_imageurl = true && that.isSetImageurl();
    if (this_present_imageurl || that_present_imageurl) {
      if (!(this_present_imageurl && that_present_imageurl))
        return false;
      if (!this.imageurl.equals(that.imageurl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_label = true && (isSetLabel());
    list.add(present_label);
    if (present_label)
      list.add(label);

    boolean present_manufacturer = true && (isSetManufacturer());
    list.add(present_manufacturer);
    if (present_manufacturer)
      list.add(manufacturer);

    boolean present_model = true && (isSetModel());
    list.add(present_model);
    if (present_model)
      list.add(model);

    boolean present_serialnumber = true && (isSetSerialnumber());
    list.add(present_serialnumber);
    if (present_serialnumber)
      list.add(serialnumber);

    boolean present_services = true && (isSetServices());
    list.add(present_services);
    if (present_services)
      list.add(services);

    boolean present_imageurl = true && (isSetImageurl());
    list.add(present_imageurl);
    if (present_imageurl)
      list.add(imageurl);

    return list.hashCode();
  }

  @Override
  public int compareTo(Accessory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManufacturer()).compareTo(other.isSetManufacturer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturer, other.manufacturer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialnumber()).compareTo(other.isSetSerialnumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialnumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialnumber, other.serialnumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServices()).compareTo(other.isSetServices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.services, other.services);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageurl()).compareTo(other.isSetImageurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageurl, other.imageurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Accessory(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacturer:");
    if (this.manufacturer == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacturer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialnumber:");
    if (this.serialnumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialnumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("services:");
    if (this.services == null) {
      sb.append("null");
    } else {
      sb.append(this.services);
    }
    first = false;
    if (isSetImageurl()) {
      if (!first) sb.append(", ");
      sb.append("imageurl:");
      if (this.imageurl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageurl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    if (label == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'label' was not present! Struct: " + toString());
    }
    if (manufacturer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'manufacturer' was not present! Struct: " + toString());
    }
    if (model == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'model' was not present! Struct: " + toString());
    }
    if (serialnumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serialnumber' was not present! Struct: " + toString());
    }
    if (services == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'services' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccessoryStandardSchemeFactory implements SchemeFactory {
    public AccessoryStandardScheme getScheme() {
      return new AccessoryStandardScheme();
    }
  }

  private static class AccessoryStandardScheme extends StandardScheme<Accessory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Accessory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MANUFACTURER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacturer = iprot.readString();
              struct.setManufacturerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERIALNUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialnumber = iprot.readString();
              struct.setSerialnumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.services = new ArrayList<Service>(_list40.size);
                Service _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new Service();
                  _elem41.read(iprot);
                  struct.services.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setServicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGEURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageurl = iprot.readString();
              struct.setImageurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Accessory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.manufacturer != null) {
        oprot.writeFieldBegin(MANUFACTURER_FIELD_DESC);
        oprot.writeString(struct.manufacturer);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(struct.model);
        oprot.writeFieldEnd();
      }
      if (struct.serialnumber != null) {
        oprot.writeFieldBegin(SERIALNUMBER_FIELD_DESC);
        oprot.writeString(struct.serialnumber);
        oprot.writeFieldEnd();
      }
      if (struct.services != null) {
        oprot.writeFieldBegin(SERVICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.services.size()));
          for (Service _iter43 : struct.services)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.imageurl != null) {
        if (struct.isSetImageurl()) {
          oprot.writeFieldBegin(IMAGEURL_FIELD_DESC);
          oprot.writeString(struct.imageurl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccessoryTupleSchemeFactory implements SchemeFactory {
    public AccessoryTupleScheme getScheme() {
      return new AccessoryTupleScheme();
    }
  }

  private static class AccessoryTupleScheme extends TupleScheme<Accessory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Accessory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      oprot.writeString(struct.label);
      oprot.writeString(struct.manufacturer);
      oprot.writeString(struct.model);
      oprot.writeString(struct.serialnumber);
      {
        oprot.writeI32(struct.services.size());
        for (Service _iter44 : struct.services)
        {
          _iter44.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetImageurl()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetImageurl()) {
        oprot.writeString(struct.imageurl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Accessory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct.label = iprot.readString();
      struct.setLabelIsSet(true);
      struct.manufacturer = iprot.readString();
      struct.setManufacturerIsSet(true);
      struct.model = iprot.readString();
      struct.setModelIsSet(true);
      struct.serialnumber = iprot.readString();
      struct.setSerialnumberIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.services = new ArrayList<Service>(_list45.size);
        Service _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = new Service();
          _elem46.read(iprot);
          struct.services.add(_elem46);
        }
      }
      struct.setServicesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.imageurl = iprot.readString();
        struct.setImageurlIsSet(true);
      }
    }
  }

}

