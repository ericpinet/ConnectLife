/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.connectlife.clapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Person
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-17")
public class Person implements org.apache.thrift.TBase<Person, Person._Fields>, java.io.Serializable, Cloneable, Comparable<Person> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Person");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("emails", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PHONES_FIELD_DESC = new org.apache.thrift.protocol.TField("phones", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGEURL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageurl", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PersonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PersonTupleSchemeFactory());
  }

  public String uid; // required
  public String firstname; // required
  public String lastname; // optional
  public List<Email> emails; // optional
  public List<Phone> phones; // optional
  public List<Address> address; // optional
  public String imageurl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    FIRSTNAME((short)2, "firstname"),
    LASTNAME((short)3, "lastname"),
    EMAILS((short)4, "emails"),
    PHONES((short)5, "phones"),
    ADDRESS((short)6, "address"),
    IMAGEURL((short)7, "imageurl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // FIRSTNAME
          return FIRSTNAME;
        case 3: // LASTNAME
          return LASTNAME;
        case 4: // EMAILS
          return EMAILS;
        case 5: // PHONES
          return PHONES;
        case 6: // ADDRESS
          return ADDRESS;
        case 7: // IMAGEURL
          return IMAGEURL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LASTNAME,_Fields.EMAILS,_Fields.PHONES,_Fields.ADDRESS,_Fields.IMAGEURL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("firstname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("lastname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAILS, new org.apache.thrift.meta_data.FieldMetaData("emails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Email.class))));
    tmpMap.put(_Fields.PHONES, new org.apache.thrift.meta_data.FieldMetaData("phones", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Phone.class))));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class))));
    tmpMap.put(_Fields.IMAGEURL, new org.apache.thrift.meta_data.FieldMetaData("imageurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Person.class, metaDataMap);
  }

  public Person() {
  }

  public Person(
    String uid,
    String firstname)
  {
    this();
    this.uid = uid;
    this.firstname = firstname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Person(Person other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetFirstname()) {
      this.firstname = other.firstname;
    }
    if (other.isSetLastname()) {
      this.lastname = other.lastname;
    }
    if (other.isSetEmails()) {
      List<Email> __this__emails = new ArrayList<Email>(other.emails.size());
      for (Email other_element : other.emails) {
        __this__emails.add(new Email(other_element));
      }
      this.emails = __this__emails;
    }
    if (other.isSetPhones()) {
      List<Phone> __this__phones = new ArrayList<Phone>(other.phones.size());
      for (Phone other_element : other.phones) {
        __this__phones.add(new Phone(other_element));
      }
      this.phones = __this__phones;
    }
    if (other.isSetAddress()) {
      List<Address> __this__address = new ArrayList<Address>(other.address.size());
      for (Address other_element : other.address) {
        __this__address.add(new Address(other_element));
      }
      this.address = __this__address;
    }
    if (other.isSetImageurl()) {
      this.imageurl = other.imageurl;
    }
  }

  public Person deepCopy() {
    return new Person(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.firstname = null;
    this.lastname = null;
    this.emails = null;
    this.phones = null;
    this.address = null;
    this.imageurl = null;
  }

  public String getUid() {
    return this.uid;
  }

  public Person setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getFirstname() {
    return this.firstname;
  }

  public Person setFirstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

  public void unsetFirstname() {
    this.firstname = null;
  }

  /** Returns true if field firstname is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstname() {
    return this.firstname != null;
  }

  public void setFirstnameIsSet(boolean value) {
    if (!value) {
      this.firstname = null;
    }
  }

  public String getLastname() {
    return this.lastname;
  }

  public Person setLastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

  public void unsetLastname() {
    this.lastname = null;
  }

  /** Returns true if field lastname is set (has been assigned a value) and false otherwise */
  public boolean isSetLastname() {
    return this.lastname != null;
  }

  public void setLastnameIsSet(boolean value) {
    if (!value) {
      this.lastname = null;
    }
  }

  public int getEmailsSize() {
    return (this.emails == null) ? 0 : this.emails.size();
  }

  public java.util.Iterator<Email> getEmailsIterator() {
    return (this.emails == null) ? null : this.emails.iterator();
  }

  public void addToEmails(Email elem) {
    if (this.emails == null) {
      this.emails = new ArrayList<Email>();
    }
    this.emails.add(elem);
  }

  public List<Email> getEmails() {
    return this.emails;
  }

  public Person setEmails(List<Email> emails) {
    this.emails = emails;
    return this;
  }

  public void unsetEmails() {
    this.emails = null;
  }

  /** Returns true if field emails is set (has been assigned a value) and false otherwise */
  public boolean isSetEmails() {
    return this.emails != null;
  }

  public void setEmailsIsSet(boolean value) {
    if (!value) {
      this.emails = null;
    }
  }

  public int getPhonesSize() {
    return (this.phones == null) ? 0 : this.phones.size();
  }

  public java.util.Iterator<Phone> getPhonesIterator() {
    return (this.phones == null) ? null : this.phones.iterator();
  }

  public void addToPhones(Phone elem) {
    if (this.phones == null) {
      this.phones = new ArrayList<Phone>();
    }
    this.phones.add(elem);
  }

  public List<Phone> getPhones() {
    return this.phones;
  }

  public Person setPhones(List<Phone> phones) {
    this.phones = phones;
    return this;
  }

  public void unsetPhones() {
    this.phones = null;
  }

  /** Returns true if field phones is set (has been assigned a value) and false otherwise */
  public boolean isSetPhones() {
    return this.phones != null;
  }

  public void setPhonesIsSet(boolean value) {
    if (!value) {
      this.phones = null;
    }
  }

  public int getAddressSize() {
    return (this.address == null) ? 0 : this.address.size();
  }

  public java.util.Iterator<Address> getAddressIterator() {
    return (this.address == null) ? null : this.address.iterator();
  }

  public void addToAddress(Address elem) {
    if (this.address == null) {
      this.address = new ArrayList<Address>();
    }
    this.address.add(elem);
  }

  public List<Address> getAddress() {
    return this.address;
  }

  public Person setAddress(List<Address> address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getImageurl() {
    return this.imageurl;
  }

  public Person setImageurl(String imageurl) {
    this.imageurl = imageurl;
    return this;
  }

  public void unsetImageurl() {
    this.imageurl = null;
  }

  /** Returns true if field imageurl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageurl() {
    return this.imageurl != null;
  }

  public void setImageurlIsSet(boolean value) {
    if (!value) {
      this.imageurl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case FIRSTNAME:
      if (value == null) {
        unsetFirstname();
      } else {
        setFirstname((String)value);
      }
      break;

    case LASTNAME:
      if (value == null) {
        unsetLastname();
      } else {
        setLastname((String)value);
      }
      break;

    case EMAILS:
      if (value == null) {
        unsetEmails();
      } else {
        setEmails((List<Email>)value);
      }
      break;

    case PHONES:
      if (value == null) {
        unsetPhones();
      } else {
        setPhones((List<Phone>)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((List<Address>)value);
      }
      break;

    case IMAGEURL:
      if (value == null) {
        unsetImageurl();
      } else {
        setImageurl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case FIRSTNAME:
      return getFirstname();

    case LASTNAME:
      return getLastname();

    case EMAILS:
      return getEmails();

    case PHONES:
      return getPhones();

    case ADDRESS:
      return getAddress();

    case IMAGEURL:
      return getImageurl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case FIRSTNAME:
      return isSetFirstname();
    case LASTNAME:
      return isSetLastname();
    case EMAILS:
      return isSetEmails();
    case PHONES:
      return isSetPhones();
    case ADDRESS:
      return isSetAddress();
    case IMAGEURL:
      return isSetImageurl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }

  public boolean equals(Person that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_firstname = true && this.isSetFirstname();
    boolean that_present_firstname = true && that.isSetFirstname();
    if (this_present_firstname || that_present_firstname) {
      if (!(this_present_firstname && that_present_firstname))
        return false;
      if (!this.firstname.equals(that.firstname))
        return false;
    }

    boolean this_present_lastname = true && this.isSetLastname();
    boolean that_present_lastname = true && that.isSetLastname();
    if (this_present_lastname || that_present_lastname) {
      if (!(this_present_lastname && that_present_lastname))
        return false;
      if (!this.lastname.equals(that.lastname))
        return false;
    }

    boolean this_present_emails = true && this.isSetEmails();
    boolean that_present_emails = true && that.isSetEmails();
    if (this_present_emails || that_present_emails) {
      if (!(this_present_emails && that_present_emails))
        return false;
      if (!this.emails.equals(that.emails))
        return false;
    }

    boolean this_present_phones = true && this.isSetPhones();
    boolean that_present_phones = true && that.isSetPhones();
    if (this_present_phones || that_present_phones) {
      if (!(this_present_phones && that_present_phones))
        return false;
      if (!this.phones.equals(that.phones))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_imageurl = true && this.isSetImageurl();
    boolean that_present_imageurl = true && that.isSetImageurl();
    if (this_present_imageurl || that_present_imageurl) {
      if (!(this_present_imageurl && that_present_imageurl))
        return false;
      if (!this.imageurl.equals(that.imageurl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_firstname = true && (isSetFirstname());
    list.add(present_firstname);
    if (present_firstname)
      list.add(firstname);

    boolean present_lastname = true && (isSetLastname());
    list.add(present_lastname);
    if (present_lastname)
      list.add(lastname);

    boolean present_emails = true && (isSetEmails());
    list.add(present_emails);
    if (present_emails)
      list.add(emails);

    boolean present_phones = true && (isSetPhones());
    list.add(present_phones);
    if (present_phones)
      list.add(phones);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_imageurl = true && (isSetImageurl());
    list.add(present_imageurl);
    if (present_imageurl)
      list.add(imageurl);

    return list.hashCode();
  }

  @Override
  public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstname, other.firstname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastname, other.lastname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmails()).compareTo(other.isSetEmails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emails, other.emails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhones()).compareTo(other.isSetPhones());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhones()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phones, other.phones);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageurl()).compareTo(other.isSetImageurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageurl, other.imageurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Person(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstname:");
    if (this.firstname == null) {
      sb.append("null");
    } else {
      sb.append(this.firstname);
    }
    first = false;
    if (isSetLastname()) {
      if (!first) sb.append(", ");
      sb.append("lastname:");
      if (this.lastname == null) {
        sb.append("null");
      } else {
        sb.append(this.lastname);
      }
      first = false;
    }
    if (isSetEmails()) {
      if (!first) sb.append(", ");
      sb.append("emails:");
      if (this.emails == null) {
        sb.append("null");
      } else {
        sb.append(this.emails);
      }
      first = false;
    }
    if (isSetPhones()) {
      if (!first) sb.append(", ");
      sb.append("phones:");
      if (this.phones == null) {
        sb.append("null");
      } else {
        sb.append(this.phones);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetImageurl()) {
      if (!first) sb.append(", ");
      sb.append("imageurl:");
      if (this.imageurl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageurl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    if (firstname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'firstname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PersonStandardSchemeFactory implements SchemeFactory {
    public PersonStandardScheme getScheme() {
      return new PersonStandardScheme();
    }
  }

  private static class PersonStandardScheme extends StandardScheme<Person> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Person struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstname = iprot.readString();
              struct.setFirstnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LASTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastname = iprot.readString();
              struct.setLastnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.emails = new ArrayList<Email>(_list8.size);
                Email _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Email();
                  _elem9.read(iprot);
                  struct.emails.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setEmailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PHONES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.phones = new ArrayList<Phone>(_list11.size);
                Phone _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Phone();
                  _elem12.read(iprot);
                  struct.phones.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setPhonesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.address = new ArrayList<Address>(_list14.size);
                Address _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new Address();
                  _elem15.read(iprot);
                  struct.address.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGEURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageurl = iprot.readString();
              struct.setImageurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Person struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.firstname != null) {
        oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
        oprot.writeString(struct.firstname);
        oprot.writeFieldEnd();
      }
      if (struct.lastname != null) {
        if (struct.isSetLastname()) {
          oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
          oprot.writeString(struct.lastname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.emails != null) {
        if (struct.isSetEmails()) {
          oprot.writeFieldBegin(EMAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.emails.size()));
            for (Email _iter17 : struct.emails)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.phones != null) {
        if (struct.isSetPhones()) {
          oprot.writeFieldBegin(PHONES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.phones.size()));
            for (Phone _iter18 : struct.phones)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.address.size()));
            for (Address _iter19 : struct.address)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageurl != null) {
        if (struct.isSetImageurl()) {
          oprot.writeFieldBegin(IMAGEURL_FIELD_DESC);
          oprot.writeString(struct.imageurl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PersonTupleSchemeFactory implements SchemeFactory {
    public PersonTupleScheme getScheme() {
      return new PersonTupleScheme();
    }
  }

  private static class PersonTupleScheme extends TupleScheme<Person> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      oprot.writeString(struct.firstname);
      BitSet optionals = new BitSet();
      if (struct.isSetLastname()) {
        optionals.set(0);
      }
      if (struct.isSetEmails()) {
        optionals.set(1);
      }
      if (struct.isSetPhones()) {
        optionals.set(2);
      }
      if (struct.isSetAddress()) {
        optionals.set(3);
      }
      if (struct.isSetImageurl()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLastname()) {
        oprot.writeString(struct.lastname);
      }
      if (struct.isSetEmails()) {
        {
          oprot.writeI32(struct.emails.size());
          for (Email _iter20 : struct.emails)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetPhones()) {
        {
          oprot.writeI32(struct.phones.size());
          for (Phone _iter21 : struct.phones)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetAddress()) {
        {
          oprot.writeI32(struct.address.size());
          for (Address _iter22 : struct.address)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetImageurl()) {
        oprot.writeString(struct.imageurl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Person struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct.firstname = iprot.readString();
      struct.setFirstnameIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.lastname = iprot.readString();
        struct.setLastnameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.emails = new ArrayList<Email>(_list23.size);
          Email _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new Email();
            _elem24.read(iprot);
            struct.emails.add(_elem24);
          }
        }
        struct.setEmailsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.phones = new ArrayList<Phone>(_list26.size);
          Phone _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new Phone();
            _elem27.read(iprot);
            struct.phones.add(_elem27);
          }
        }
        struct.setPhonesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.address = new ArrayList<Address>(_list29.size);
          Address _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new Address();
            _elem30.read(iprot);
            struct.address.add(_elem30);
          }
        }
        struct.setAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.imageurl = iprot.readString();
        struct.setImageurlIsSet(true);
      }
    }
  }

}

