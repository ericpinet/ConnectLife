/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.connectlife.clapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Room
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-1")
public class Room implements org.apache.thrift.TBase<Room, Room._Fields>, java.io.Serializable, Cloneable, Comparable<Room> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Room");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESSORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("accessories", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGEURL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageurl", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoomStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoomTupleSchemeFactory());
  }

  public String uid; // required
  public String label; // required
  public List<Accessory> accessories; // optional
  public String imageurl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    LABEL((short)2, "label"),
    ACCESSORIES((short)3, "accessories"),
    IMAGEURL((short)4, "imageurl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // LABEL
          return LABEL;
        case 3: // ACCESSORIES
          return ACCESSORIES;
        case 4: // IMAGEURL
          return IMAGEURL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ACCESSORIES,_Fields.IMAGEURL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESSORIES, new org.apache.thrift.meta_data.FieldMetaData("accessories", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Accessory.class))));
    tmpMap.put(_Fields.IMAGEURL, new org.apache.thrift.meta_data.FieldMetaData("imageurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Room.class, metaDataMap);
  }

  public Room() {
  }

  public Room(
    String uid,
    String label)
  {
    this();
    this.uid = uid;
    this.label = label;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Room(Room other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetAccessories()) {
      List<Accessory> __this__accessories = new ArrayList<Accessory>(other.accessories.size());
      for (Accessory other_element : other.accessories) {
        __this__accessories.add(new Accessory(other_element));
      }
      this.accessories = __this__accessories;
    }
    if (other.isSetImageurl()) {
      this.imageurl = other.imageurl;
    }
  }

  public Room deepCopy() {
    return new Room(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.label = null;
    this.accessories = null;
    this.imageurl = null;
  }

  public String getUid() {
    return this.uid;
  }

  public Room setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public Room setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public int getAccessoriesSize() {
    return (this.accessories == null) ? 0 : this.accessories.size();
  }

  public java.util.Iterator<Accessory> getAccessoriesIterator() {
    return (this.accessories == null) ? null : this.accessories.iterator();
  }

  public void addToAccessories(Accessory elem) {
    if (this.accessories == null) {
      this.accessories = new ArrayList<Accessory>();
    }
    this.accessories.add(elem);
  }

  public List<Accessory> getAccessories() {
    return this.accessories;
  }

  public Room setAccessories(List<Accessory> accessories) {
    this.accessories = accessories;
    return this;
  }

  public void unsetAccessories() {
    this.accessories = null;
  }

  /** Returns true if field accessories is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessories() {
    return this.accessories != null;
  }

  public void setAccessoriesIsSet(boolean value) {
    if (!value) {
      this.accessories = null;
    }
  }

  public String getImageurl() {
    return this.imageurl;
  }

  public Room setImageurl(String imageurl) {
    this.imageurl = imageurl;
    return this;
  }

  public void unsetImageurl() {
    this.imageurl = null;
  }

  /** Returns true if field imageurl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageurl() {
    return this.imageurl != null;
  }

  public void setImageurlIsSet(boolean value) {
    if (!value) {
      this.imageurl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case ACCESSORIES:
      if (value == null) {
        unsetAccessories();
      } else {
        setAccessories((List<Accessory>)value);
      }
      break;

    case IMAGEURL:
      if (value == null) {
        unsetImageurl();
      } else {
        setImageurl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case LABEL:
      return getLabel();

    case ACCESSORIES:
      return getAccessories();

    case IMAGEURL:
      return getImageurl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case LABEL:
      return isSetLabel();
    case ACCESSORIES:
      return isSetAccessories();
    case IMAGEURL:
      return isSetImageurl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Room)
      return this.equals((Room)that);
    return false;
  }

  public boolean equals(Room that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_accessories = true && this.isSetAccessories();
    boolean that_present_accessories = true && that.isSetAccessories();
    if (this_present_accessories || that_present_accessories) {
      if (!(this_present_accessories && that_present_accessories))
        return false;
      if (!this.accessories.equals(that.accessories))
        return false;
    }

    boolean this_present_imageurl = true && this.isSetImageurl();
    boolean that_present_imageurl = true && that.isSetImageurl();
    if (this_present_imageurl || that_present_imageurl) {
      if (!(this_present_imageurl && that_present_imageurl))
        return false;
      if (!this.imageurl.equals(that.imageurl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_label = true && (isSetLabel());
    list.add(present_label);
    if (present_label)
      list.add(label);

    boolean present_accessories = true && (isSetAccessories());
    list.add(present_accessories);
    if (present_accessories)
      list.add(accessories);

    boolean present_imageurl = true && (isSetImageurl());
    list.add(present_imageurl);
    if (present_imageurl)
      list.add(imageurl);

    return list.hashCode();
  }

  @Override
  public int compareTo(Room other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessories()).compareTo(other.isSetAccessories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessories, other.accessories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageurl()).compareTo(other.isSetImageurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageurl, other.imageurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Room(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (isSetAccessories()) {
      if (!first) sb.append(", ");
      sb.append("accessories:");
      if (this.accessories == null) {
        sb.append("null");
      } else {
        sb.append(this.accessories);
      }
      first = false;
    }
    if (isSetImageurl()) {
      if (!first) sb.append(", ");
      sb.append("imageurl:");
      if (this.imageurl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageurl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not present! Struct: " + toString());
    }
    if (label == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'label' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoomStandardSchemeFactory implements SchemeFactory {
    public RoomStandardScheme getScheme() {
      return new RoomStandardScheme();
    }
  }

  private static class RoomStandardScheme extends StandardScheme<Room> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Room struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESSORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.accessories = new ArrayList<Accessory>(_list48.size);
                Accessory _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new Accessory();
                  _elem49.read(iprot);
                  struct.accessories.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setAccessoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGEURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageurl = iprot.readString();
              struct.setImageurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Room struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.accessories != null) {
        if (struct.isSetAccessories()) {
          oprot.writeFieldBegin(ACCESSORIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.accessories.size()));
            for (Accessory _iter51 : struct.accessories)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageurl != null) {
        if (struct.isSetImageurl()) {
          oprot.writeFieldBegin(IMAGEURL_FIELD_DESC);
          oprot.writeString(struct.imageurl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoomTupleSchemeFactory implements SchemeFactory {
    public RoomTupleScheme getScheme() {
      return new RoomTupleScheme();
    }
  }

  private static class RoomTupleScheme extends TupleScheme<Room> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Room struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uid);
      oprot.writeString(struct.label);
      BitSet optionals = new BitSet();
      if (struct.isSetAccessories()) {
        optionals.set(0);
      }
      if (struct.isSetImageurl()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAccessories()) {
        {
          oprot.writeI32(struct.accessories.size());
          for (Accessory _iter52 : struct.accessories)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetImageurl()) {
        oprot.writeString(struct.imageurl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Room struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readString();
      struct.setUidIsSet(true);
      struct.label = iprot.readString();
      struct.setLabelIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.accessories = new ArrayList<Accessory>(_list53.size);
          Accessory _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new Accessory();
            _elem54.read(iprot);
            struct.accessories.add(_elem54);
          }
        }
        struct.setAccessoriesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imageurl = iprot.readString();
        struct.setImageurlIsSet(true);
      }
    }
  }

}

